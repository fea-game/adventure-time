---
import Button from "../common/Button.astro";
import Loader from "../common/Loader.astro";
import TextArea from "../common/TextArea.astro";
---

<div class="px-8 xl:px-16 py-6 xl:py-12 flex flex-col gap-y-4 bg-teal-500/20">
  <div class="flex justify-between items-center">
    <label class="text-3xl font-semibold font-heading">Story</label>
    <Button id="submit_init_story">▶️ Start with sample Story</Button>
  </div>
  <div id="output_story" class="flex flex-col gap-y-6"></div>
  <div class="flex justify-center invisible" id="loader">
    <Loader />
  </div>
</div>

<form
  class="px-8 xl:px-16 py-6 xl:py-12 grid grid-flow-row md:grid-flow-col gap-12 justify-items-stretch"
>
  <div class="flex flex-col gap-y-4">
    <label class="text-3xl font-semibold font-heading">Player A</label>
    <TextArea
      id="input_player_a"
      placeholder="Type away Player A..."
      helper="What do you want to do?"
    />
    <Button id="submit_player_a">Submit</Button>
  </div>
  <div class="flex flex-col gap-y-4">
    <label class="text-3xl font-semibold font-heading">Player B</label>
    <TextArea
      id="input_player_b"
      placeholder="Type away Player B..."
      helper="What do you want to do?"
    />
    <Button id="submit_player_b">Submit</Button>
  </div>
</form>

<script>
  import { entries as initialStoryEntries } from "../../text-generation/prompts/story.v1";
  import { act } from "./act";

  const story = document.getElementById("output_story");
  const loader = document.getElementById("loader");
  const players = ["player_a", "player_b"];
  let isStoryInitiated = false;

  function hydrateUi() {
    if (story) {
      players.forEach((playerId) => {
        const button = document.getElementById(`submit_${playerId}`);

        if (button) {
          const input = document.getElementById(
            `input_${playerId}`
          ) as HTMLTextAreaElement | null;
          const playerAct = addPlayerAction(playerId);

          button.addEventListener("click", () => {
            const description = input?.value;

            if (description) {
              playerAct(description);
            }
          });
        }
      });
    }

    const button = document.getElementById("submit_init_story");
    if (button) {
      button.addEventListener("click", async () => {
        if (!isStoryInitiated) {
          for (const entry of initialStoryEntries) {
            await addPlayerAction(entry.player!)(entry.prompt!);
          }
        }
      });
    }
  }

  function addPlayerAction(playerId: string) {
    const playerAct = act(playerId);
    return async (action: string) => {
      disableInitiateStory();

      story?.append(
        storyEntry({
          actor: playerId,
          text: action,
          num: story?.children.length ?? 0,
        })
      );

      setIsLoading();

      const result = await playerAct(action);

      setIsDone();

      if (result.isError) {
        alert(result.error);
      }

      if (result.isSuccess) {
        story?.append(
          storyEntry({
            actor: result.data.actor,
            text: result.data.text,
            num: story?.children.length ?? 0,
          })
        );
      }
    };
  }

  function disableInitiateStory() {
    if (isStoryInitiated) return;

    isStoryInitiated = true;

    const button = document.getElementById("submit_init_story");
    if (button instanceof HTMLButtonElement) {
      button.disabled = true;
    }
  }

  let playerButtons: Array<HTMLButtonElement | null> = [];

  function setIsLoading() {
    loader?.classList.remove("invisible");
    if (playerButtons.length !== players.length) {
      playerButtons = players.map(
        (playerId) =>
          document.getElementById(
            `submit_${playerId}`
          ) as HTMLButtonElement | null
      );
    }
    playerButtons.forEach((button) => {
      if (button) {
        button.disabled = true;
      }
    });
  }

  function setIsDone() {
    loader?.classList.add("invisible");
    if (playerButtons.length !== players.length) {
      playerButtons = players.map(
        (playerId) =>
          document.getElementById(
            `submit_${playerId}`
          ) as HTMLButtonElement | null
      );
    }
    playerButtons.forEach((button) => {
      if (button) {
        button.disabled = false;
      }
    });
  }

  function storyEntry({
    actor,
    num,
    text,
  }: {
    actor: string;
    num: number;
    text: string;
  }) {
    const isEven = num % 2 === 0;

    const container = document.createElement("section");
    container.className = `flex flex-col gap-y-1 ${isEven ? "text-left" : "text-right"}`;

    const title = document.createElement("h3");
    title.className = "text-lg";
    title.textContent = `${isEven ? "> " : ""}${actor}${!isEven ? " <" : ""}`;
    container.append(title);

    const content = document.createElement("p");
    content.textContent = text;
    container.append(content);

    return container;
  }

  hydrateUi();
</script>
